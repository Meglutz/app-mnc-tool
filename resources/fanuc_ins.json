{
  "COMMENT" : {
    "0" : "JSON-Info",
    "1" : "opStr placeholders: $xyz.0 or xyz.n      -> N-th element of [xyz]. used if [xyz] is an array",
    "2" : "                    $reads or $writes    -> Value of [reads] or [writes]",
    "3" : "                    $depOf               -> Value of dependecy.dependentOf",
    "4" : "                    $frmLen              -> Value of format.length",
    "5" : "                    $frmKin              -> Value of format.kind",
    "6" : "                    $frmMod              -> Value of format.modifier",
    "7" : "                    $frmLenBit           -> Value of format.length multiplied by 8. F.e. If Word, then $frmLenBit = 16",
    "8" : "                    $RowRepeatX          -> Repeats the current row X times. No spaces allowed. Other ph's can be used. F.e. '$RowRepeat$frmLenBit'"

  },

  "1" : {
    "name" : "END1"
  },

  "2" : {
    "name" : "END2"
  },

  "48" : {
    "name" : "END3"
  },

  "64" : {
    "name" : "SUBEND"
  },

  "65" : {
    "name" : "SUBCALL",
    "format.length" : 1,
    "readsOffset" : 1,
    "graphicalData" : {
      "opStr" : "Starts the Subprogram $reads"
    }
  },

  "66" : {
    "name" : "SUBCALLU",
    "format.length" : 1,
    "readsOffset" : 1,
    "graphicalData" : {
      "opStr" : "Starts the Subprogram $reads"
    }
  },

  "71" : {
    "name" : "SUBPRG",
    "format.length" : 1,
    "readsOffset" : 1,
    "graphicalData" : {
      "opStr" : "Header of the Subprogram $reads"
    }
  },

  "72" : {
    "name" : "SUBE"
  },

  "3" : {
    "name" : "TMR",
    "format.length" : 1,
    "readsOffset" : 1
  },

  "24" : {
    "name" : "TMRB",
    "format.length" : 1,
    "readsOffset" : 1
  },

  "54" : {
    "name" : "TMRC",
    "format.length" : 1,
    "readsOffset" : 1
  },

  "77" : {
    "name" : "TMBRF",
    "format.length" : 1,
    "readsOffset" : 1
  },

  "25" : {
    "name" : "DECB",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Reads for $frmLen byte(s) $frmKin. At $reads.0 & $reads.1 and writes the decoded result to $writes",
      "tableRows" : [["$StyleCellHead Reads",                          "$StyleCellHead Symbol", "DECB",  "$StyleCellHead Reads",         "$StyleCellHead Symbol", " ",     "$StyleCellHead Writes",        "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads.0",                      "$Definition",           "<>",    "$StyleCellGreen $reads.1",     "$Definition"          , "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           " ",     "$StyleCellGreen $reads.1",     "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "5" : {
    "name" : "CTR",
    "format.length" : 1,
    "readsOffset" : 1,
    "writesOffset" : 1
  },

  "55" : {
    "name" : "CTRC",
    "format.length" : 2,
    "readsOffset" : 1,
    "writesOffset" : 1,
    "graphicalData" : {
      "opStr" : "Reads counter initialization value from $reads and handles the counter register $writes",
      "tableRows" : [["$StyleCellHead Reads",   "$StyleCellHead Symbol", "$StyleCellHead Reads",  "$StyleCellHead Symbol", " "   ],
                     ["$StyleCellGreen $reads", "$Definition",           "$StyleCellRed $writes", "$Definition",           "CTRC"]]
    }
  },

  "56" : {
    "name" : "CTRB",
    "format.length" : 1,
    "readsOffset" : 1,
    "writesOffset" : 1,
    "graphicalData" : {
      "opStr" : "Reads counter initialization value from $reads and handles the counter register $writes",
      "tabelRows" : [["$StyleCellHead Reads",   "$StyleCellHead Symbol", "$StyleCellHead Reads",  "$StyleCellHead Symbol", " "   ],
                     ["$StyleCellGreen $reads", "$Definition",           "$StyleCellRed $writes", "$Definition",           "CTRB"]]
    }
  },

  "6" : {
    "name" : "ROT",
    "usedUndefinedInstruction" : true
  },

  "26" : {
    "name" : "ROTB",
    "usedUndefinedInstruction" : true
  },

  "7" : {
    "name" : "COD",
    "usedUndefinedInstruction" : true
  },

  "27" : {
    "name" : "CODB",
    "format" : 1,
    "readsOffset" : 3,
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "This instruction converts data at $reads in binary format to an optional binary format 1 byte, 2 bytes or 4 bytes data at $writes.",
      "tableRows" : [["$StyleCellHead Reads",                        "$StyleCellHead Symbol", "CODB",  "$StyleCellHead Reads",         "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads",                      "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads", "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "8" : {
    "name" : "MOVE",
    "usedUndefinedInstruction" : true
  },

  "28" : {
    "name" : "MOVOR",
    "format.length" : 1,
    "readsOffset" : [1, 2],
    "writesOffset" : 3,
    "graphicalData" : {
      "opStr" :  "Executes the logical OR sum between $reads.0 & $reads.1 and stores it to $writes.<br>This means that $reads.0 bit .0 is compared to $reads.1 bit .0 and if either one of them is  == 1, $writes bit .0 will be written",
      "tableRows" : [["$StyleCellHead Reads",                          "$StyleCellHead Symbol",   "MOVOR", "$StyleCellHead Reads",    "$StyleCellHead Symbol", " ",  "$StyleCellHead Writes", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",             "˅",     "$StyleCellGreen $reads.1", "$Definition",          "->", "$StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "9" : {
    "name" : "COM",
    "usedUndefinedInstruction" : true
  },

  "29" : {
    "name" : "COME",
    "usedUndefinedInstruction" : true
  },

  "10" : {
    "name" : "JMP"
  },

  "30" : {
    "name" : "JMPE"
  },

  "68" : {
    "name" : "JMPB"
  },

  "69" : {
    "name" : "LBL"
  },

  "11" : {
    "name" : "PARI",
    "usedUndefinedInstruction" : true
  },

  "14" : {
    "name" : "DCNV",
    "usedUndefinedInstruction" : true
  },

  "31" : {
    "name" : "DCNVB",
    "format" : 1,
    "readsOffset" : 2,
    "writesOffset" : 3,
    "graphicalData" : {
      "opStr" : "Converts $frmLen bytes at $reads from binary to BCD and writes it to $writes",
      "tableRows" : [["$StyleCellHead Reads",                        "$StyleCellHead Symbol", "DCNVB", "$StyleCellHead Writes",        "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads",                      "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads", "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "15" : {
    "name" : "COMP",
    "usedUndefinedInstruction" : true
  },

  "32" : {
    "name" : "COMPB",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : null,
    "graphicalData" : {
      "opStr" : "This instruction compares $frmLen byte binary data ($reads.0 to $reads.1). Results of comparison are set in the operation output register (R9000, Z0).",
      "tableRows" : [["$StyleCellHead A",                              "$StyleCellHead Symbol",   "COMPB", "$StyleCellHead B",             "$StyleCellHead Symbol", "$StyleCellHead Description"],
                     ["$StyleCellGreen $reads.0",                      "$Definition",             "<> ",   "$StyleCellGreen $reads.1",     "$Definition",           "(Doesn't compare bits!)"],
                     [" ",                                             " ",                       "->",    "$StyleCellRed R9000.0",        "$Definition",           "If $reads.0 == $reads.1"],
                     [" ",                                             " ",                       "->",    "$StyleCellRed R9000.1",        "$Definition",           "If $reads.0 <  $reads.1"],
                     [" ",                                             " ",                       "->",    "$StyleCellRed R9000.5",        "$Definition",           "If $reads.0 || $reads.1 > Max (Overflow)"],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol",   "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "──────"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",             " ",     "$StyleCellGreen $reads.1",     "$Definition",           " "]]

    }
  },

  "16" : {
    "name" : "COIN",
    "usedUndefinedInstruction" : true
  },

  "33" : {
    "name" : "SFT",
    "usedUndefinedInstruction" : true
  },

  "17" : {
    "name" : "DSCH",
    "usedUndefinedInstruction" : true
  },

  "34" : {
    "name" : "DSCHB",
    "usedUndefinedInstruction" : true
  },

  "18" : {
    "name" : "XMOV",
    "usedUndefinedInstruction" : true
  },

  "35" : {
    "name" : "XMOVB",
    "format" : 1,
    "format.modifier" : ["*", 2],
    "readsOffset" :  [3, 4],
    "writesOffset" : [4, 3],
    "dependency" : ["ReadWriteDependency", -3],
    "graphicalData" : {
      "opStr" : "If <b> $depOf is true, it will read $reads.0 and write it to $writes.0. <br>If <b> $depOf </b> is false, it will read $writes.0 and write it to $reads.0.<br> The length is defined by it's format ($frmLen byte(s), $frmKin) multiplied by the value of <b>$frmMod.1</b>",
      "tableExtraDescription" : "Read / Write depends on the state of $depOf",
      "tableRows" : [["$StyleCellHead A",                               "$StyleCellHead Symbol", "XMOVB",   "$StyleCellHead B",             "$StyleCellHead Symbol", "$StyleCellHead Description"],
                     ["$StyleCellYellow $reads.0",                      "$Definition",           "<>",      "$StyleCellYellow $writes.0",   "$Definition",           "-"                         ],
                     [" ",                                              " ",                     "If == 1", "$StyleCellGreen $depOf",       "$Definition",           "Move $reads.0 -> $writes.0"],
                     [" ",                                              " ",                     "If == 0", "$StyleCellRed $depOf",         "$Definition",           "Move $reads.0 <- $writes.0"],
                     ["$StyleCellHead Affected Bits",                   "$StyleCellHead Symbol", "─────",   "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "──────"                    ],
                     ["$RowRepeat$frmLenBit $StyleCellYellow $reads.0", "$Definition",           " ",       "$StyleCellYellow $writes.0",   "$Definition",           " "                         ]]
    }
  },

  "19" : {
    "name" : "ADD",
    "usedUndefinedInstruction" : true
  },

  "36" : {
    "name" : "ADDB",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Adds $reads.1 to $reads.0 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Summand A",                      "$StyleCellHead Symbol", "ADDB",   "$StyleCellHead Summand B",     "$StyleCellHead Symbol", " ",     "$StyleCellHead Sum",           "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads.0",                      "$Definition",           "+",      "$StyleCellGreen $reads.1",     "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol", "─────",  "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           " ",      "$StyleCellGreen $reads.1",     "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "20" : {
    "name" : "SUB",
    "usedUndefinedInstruction" : true
  },

  "37" : {
    "name" : "SUBB",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Subtracts $reads.1 from $reads.0 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Minued",                        "$StyleCellHead Symbol", "SUBB",   "$StyleCellHead Subtrahend",     "$StyleCellHead Symbol", " ",     "$StyleCellHead Difference",    "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads.0",                      "$Definition",           "-",      "$StyleCellGreen $reads.1",     "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol", "─────",  "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           " ",      "$StyleCellGreen $reads.1",     "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "21" : {
    "name" : "MUL",
    "usedUndefinedInstruction" : true
  },

  "38" : {
    "name" : "MULB",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Multiplies $reads.0 with $reads.1 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Factor A",                       "$StyleCellHead Symbol", "MULB",   "$StyleCellHead Factor B",      "$StyleCellHead Symbol", " ",     "$StyleCellHead Product",       "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads.0",                      "$Definition",           "*",      "$StyleCellGreen $reads.1",     "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol", "─────",  "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           " ",      "$StyleCellGreen $reads.1",     "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "22" : {
    "name" : "DIV",
    "usedUndefinedInstruction" : true
  },

  "39" : {
    "name" : "DIVB",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Divides $reads.0 by $reads.1 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Dividend",                       "$StyleCellHead Symbol", "DIVB",   "$StyleCellHead Divisor",       "$StyleCellHead Symbol", " ",     "$StyleCellHead Quotient",      "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads.0",                      "$Definition",           "÷",      "$StyleCellGreen $reads.1",     "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol", "─────",  "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           " ",      "$StyleCellGreen $reads.1",     "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "23" : {
    "name" : "NUME",
    "usedUndefinedInstruction" : true
  },

  "40" : {
    "name" : "NUMEB",
    "format" : 1,
    "readsOffset" :  2,
    "writesOffset" : 3,
    "graphicalData" : {
      "opStr" : "Defines $writes as a constant",
      "tableRows" : [["$StyleCellHead Constant",                       "$StyleCellHead Symbol", "NUMEB", "$StyleCellHead Constant output address", "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads",                        "$Definition",           " ",     "$StyleCellRed $writes",                  "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                  "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits",           "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads",   "$Definition",           " ",     "$StyleCellRed $writes",                  "$Definition"          ]]


    }
  },

  "49" : {
    "name" : "DISP",
    "usedUndefinedInstruction" : true
  },

  "41" : {
    "name" : "DISPB"
  },

  "42" : {
  "name" : "EXIN",
    "format.length" : 5,
    "readsOffset" : 1,
    "writesOffset" : 1,
    "graphicalData" : {
      "opStr" : "This instruction enables the use of the external data input functions (options) of the CNC.<br>It controls the external data input signals to be exchanged between CNC and PMC and automatically executes the CNC-PMC handshake sequence.",
      "tableRows" : [["$StyleCellHead Controldata address",           "$StyleCellHead Symbol"],
                     ["$StyleCellYellow $reads",                      "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                 "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellYellow $reads", "$Definition"          ]]
    }
  },

  "43" : {
    "name" : "MOVB",
    "format.length" : 1,
    "readsOffset" : 1,
    "writesOffset" : 2,
    "graphicalData" : {
      "opStr" : "Moves one byte at $reads and writes it to $writes",
      "tableRows" : [["$StyleCellHead Reads",                        "$StyleCellHead Symbol", "MOVB",  "$StyleCellHead Writes",        "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads",                      "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads", "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "44" : {
    "name" : "MOVW",
    "format.length" : 2,
    "readsOffset" : 1,
    "writesOffset" : 2,
    "graphicalData" : {
      "opStr" : "Moves one word at $reads and writes it to $writes",
      "tableRows" : [["$StyleCellHead Reads",                        "$StyleCellHead Symbol", "MOVB",  "$StyleCellHead Writes",        "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads",                      "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads", "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "45" : {
    "name" : "MOVN",
    "format" : 1,
    "readsOffset" : 2,
    "writesOffset" : 3,
    "graphicalData" : {
      "opStr" : "Moves n-bytes, ($frmLen $frmKin) $reads to $writes",
      "tableRows" : [["$StyleCellHead Reads",                        "$StyleCellHead Symbol", "MOVB",  "$StyleCellHead Writes",        "$StyleCellHead Symbol"],
                     ["$StyleCellGreen $reads",                      "$Definition",           "->",    "$StyleCellRed $writes",        "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads", "$Definition",           " ",     "$StyleCellRed $writes",        "$Definition"          ]]
    }
  },

  "51" : {
    "name" : "WINDR",
    "format.length" : 1,
    "writesOffset" : 1,
    "graphicalData" : {
      "opStr" : "Reads data items from the PMC / CNC window and writes to $writes",
      "tableRows" : [["$StyleCellHead Controldata address",         "$StyleCellHead Symbol"],
                     ["$StyleCellRed $writes",                      "$Definition"          ],
                     ["$StyleCellHead Affected Bits",               "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "52" : {
    "name" : "WINDW",
    "format.length" : 1,
    "writesOffset" : 1,
    "graphicalData" : {
      "opStr" : "Reads data items from the PMC / CNC window and writes to $writes",
      "tableRows" : [["$StyleCellHead Controldata address",         "$StyleCellHead Symbol"],
                     ["$StyleCellRed $writes",                      "$Definition"          ],
                     ["$StyleCellHead Affected Bits",               "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "57" : {
    "name" : "DIFU",
    "format.length" : 1,
    "readsOffset" : 1,
    "dependency" : ["ActivationDependency", -1],
    "graphicalData" : {
      "opStr" : "Generates a positive impulse of the signal $depOf. DIFU Number: $reads",
      "tableRows" : null
    }
  },

  "58" : {
    "name" : "DIFD",
    "format.length" : 1,
    "readsOffset" : 1,
    "dependency" : ["ActivationDependency", -1],
    "graphicalData" : {
      "opStr" : "Generates a negative impulse of the signal $depOf. DIFD Number: $reads",
      "tableRows" : null
    }
  },

  "53" : {
    "name" : "AXCTL",
    "format.length" : 8,
    "readsOffset" : [1, 2],
    "graphicalData" : {
      "opStr" : "This instruction simplifies the handshake of DI/DO signal for the axis control by PMC.<br>This instance is using DI/DO group number $reads.0",
      "tableRows" : [["$StyleCellHead Axisdata address",             "$StyleCellHead Symbol"],
                     ["$StyleCellRed $reads.1",                      "$Definition"          ],
                     ["$StyleCellHead Affected Bits",                "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellRed $reads.1", "$Definition"          ]]
    }
  },

  "59" : {
    "name" : "EXOR",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Bitwise EXOR links $reads.0 to $reads.1 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Reads",                          "$StyleCellHead Symbol", "EXOR",                     "$StyleCellHead Reads",    "$StyleCellHead Symbol", " ",  "$StyleCellHead Writes", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           "&oplus; (a.k.a. &#8891;)", "$StyleCellGreen $reads.1", "$Definition",          "->", "$StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "60" : {
    "name" : "LOGAND",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Bitwise AND links $reads.0 and $reads.1 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Reads",                          "$StyleCellHead Symbol", "LOGAND", "$StyleCellHead Reads",    "$StyleCellHead Symbol", " ",  "$StyleCellHead Writes", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           "&",      "$StyleCellGreen $reads.1", "$Definition",          "->", "$StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "61" : {
    "name" : "LOGOR",
    "format" : 1,
    "readsOffset" : [2, 3],
    "writesOffset" : 4,
    "graphicalData" : {
      "opStr" : "Bitwise OR links $reads.0 to $reads.1 and writes it to $writes",
      "tableRows" : [["$StyleCellHead Reads",                          "$StyleCellHead Symbol", "LOGOR", "$StyleCellHead Reads",    "$StyleCellHead Symbol", " ",  "$StyleCellHead Writes", "$StyleCellHead Symbol"],
                     ["$RowRepeat$frmLenBit $StyleCellGreen $reads.0", "$Definition",           "˅",     "$StyleCellGreen $reads.1", "$Definition",          "->", "$StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "62" : {
    "name" : "LOGNOT",
    "format" : 1,
    "readsOffset" : 2,
    "writesOffset" : 3,
    "graphicalData" : {
      "opStr" : "Bitwise negates $reads and writes it to $writes",
      "tableRows" :  [["$StyleCellHead Reads",                        "$StyleCellHead Symbol", "LOGNOT", "$StyleCellHead Writes", "$StyleCellHead Symbol"],
                      ["$RowRepeat$frmLenBit $StyleCellGreen $reads", "$Definition",           "¬",      "$StyleCellRed $writes", "$Definition"          ]]
    }
  },

  "90" : {
    "name" : "FNC90",
    "usedUndefinedInstruction" : true
  },

  "91" : {
    "name" : "FNC91",
    "usedUndefinedInstruction" : true
  },

  "92" : {
    "name" : "FNC92",
    "usedUndefinedInstruction" : true
  },

  "93" : {
    "name" : "FNC93",
    "usedUndefinedInstruction" : true
  },

  "94" : {
    "name" : "FNC94",
    "usedUndefinedInstruction" : true
  },

  "95" : {
    "name" : "FNC95",
    "usedUndefinedInstruction" : true
  },

  "96" : {
    "name" : "FNC96",
    "usedUndefinedInstruction" : true
  },

  "97" : {
    "name" : "FNC97",
    "usedUndefinedInstruction" : true
  },

  "88" : {
    "name" : "MMC3R",
    "usedUndefinedInstruction" : true
  },

  "89" : {
    "name" : "MMC3W",
    "usedUndefinedInstruction" : true
  },

  "98" : {
    "name" : "MMCWR",
    "usedUndefinedInstruction" : true
  },

  "99" : {
    "name" : "MMCWW",
    "usedUndefinedInstruction" : true
  },

  "460" : {
    "name" : "PID",
    "usedUndefinedInstruction" : true
  },

  "219" : {
    "name" : "RNGW",
    "format.length" : 2,
    "readsOffset" :  [1, 2, 3],
    "graphicalData" : {
      "opStr" : "Word-Range comparison. <br>Lower / Upper Boundary: <b>$reads.0</b> <br>Lower / Upper Boundary: <b>$reads.1</b> <br>Inputdata :            <b>$reads.2</b> <br>Sets its output <br>if $reads.0 ≤ $reads.2 ≤ $reads.1 or <br>if $reads.1 ≤ $reads.2 ≤ $reads.0",
      "tableRows" : [["$StyleCellHead Lower / Upper boundary",          "$StyleCellHead Symbol", "RNGW",  "$StyleCellHead Inputdata",     "$StyleCellHead Symbol", "RNGW",  "$StyleCellHead Lower / Upper boundary", "$StyleCellHead Symbol" ],
                     ["$StyleCellYellow $reads.0 ",                     "$Definition",           "≤",     "$StyleCellGreen $reads.2",     "$Definition",           "≤",     "$StyleCellYellow $reads.1",             "$Definition"           ],
                     ["$StyleCellHead Affected Bits",                   "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits",          "$StyleCellHead Symbol" ],
                     ["$RowRepeat$frmLenBit $StyleCellYellow $reads,0", "$Definition",           " ",     "$StyleCellGreen $reads.2",     "$Definition",           " ",     "$StyleCellYellow $reads.1",             "$Definition"           ]]

    }
  },

  "220" : {
    "name" : "RNGD",
    "format.length" : 4,
    "reads" :  [1, 2, 3],
    "graphicalData" : {
      "opStr" : "Doubleword-Range comparison. <br>Lower / Upper Boundary: <b>$reads.0</b> <br>Lower / Upper Boundary: <b>$reads.1</b> <br>Input Data :            <b>$reads.2</b> <br>Sets its output <br>if $reads.0 ≤ $reads.2 ≤ $reads.1 or <br>if $reads.1 ≤ $reads.2 ≤ $reads.0",
      "tableRows" : [["$StyleCellHead Lower / Upper boundary",          "$StyleCellHead Symbol", "RNGW",  "$StyleCellHead Inputdata",     "$StyleCellHead Symbol", "RNGW",  "$StyleCellHead Lower / Upper boundary", "$StyleCellHead Symbol" ],
                     ["$StyleCellYellow $reads.0 ",                     "$Definition",           "≤",     "$StyleCellGreen $reads.2",     "$Definition",           "≤",     "$StyleCellYellow $reads.1",             "$Definition"           ],
                     ["$StyleCellHead Affected Bits",                   "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits", "$StyleCellHead Symbol", "─────", "$StyleCellHead Affected Bits",          "$StyleCellHead Symbol" ],
                     ["$RowRepeat$frmLenBit $StyleCellYellow $reads,0", "$Definition",           " ",     "$StyleCellGreen $reads.2",     "$Definition",           " ",     "$StyleCellYellow $reads.1",             "$Definition"           ]]
    }
  }
}
